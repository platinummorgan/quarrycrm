generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  domain      String?      @unique
  description String?
  plan        OrganizationPlan @default(FREE)
  logo        String?
  emailLogAddress String?
  deletedAt   DateTime?
  scheduledPurgeAt DateTime?
  deletedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  activities  Activity[]
  companies   Company[]
  contacts    Contact[]
  deals       Deal[]
  eventsAudit EventAudit[]
  members     OrgMember[]
  pipelines   Pipeline[]
  webhooks    Webhook[]
  savedViews  SavedView[]
  apiKeys     ApiKey[]
  importHistories ImportHistory[]
  workspaceJobs WorkspaceJob[]
  importTemplates ImportTemplate[]

  @@map("organizations")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  memberships   OrgMember[]
  savedViews    SavedView[]  @relation("UserToSavedView")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model OrgMember {
  id             String        @id @default(cuid())
  organizationId String
  userId         String
  role           OrgMemberRole @default(MEMBER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  activities     Activity[]
  companies      Company[]
  contacts       Contact[]
  deals          Deal[]
  // Onboarding fields
  onboardingDismissed Boolean @default(false) @map("onboarding_dismissed")
  onboardingProgress  Json?   @map("onboarding_progress")
  onboardingCompleted Boolean @default(false) @map("onboarding_completed")
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  pipelines      Pipeline[]
  webhooks       Webhook[]
  apiKeys        ApiKey[]
  savedViews     SavedView[] @relation("SavedViewOwner")

  @@unique([organizationId, userId])
  @@map("org_members")
}

model Contact {
  id             String       @id @default(cuid())
  organizationId String
  firstName      String
  lastName       String
  email          String?
  phone          String?
  companyId      String?
  ownerId        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  notes          String?
  email_hash     String?
  phone_hash     String?
  activities     Activity[]
  company        Company?     @relation(fields: [companyId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          OrgMember    @relation(fields: [ownerId], references: [id])
  deals          Deal[]

  @@index([organizationId])
  @@index([ownerId])
  @@index([organizationId, email_hash])
  @@index([organizationId, phone_hash])
  @@index([organizationId, firstName, lastName])
  @@map("contacts")
}

model Company {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  website        String?
  industry       String?
  description    String?
  domain         String?
  ownerId        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          OrgMember    @relation(fields: [ownerId], references: [id])
  contacts       Contact[]
  deals          Deal[]

  @@index([organizationId])
  @@index([ownerId])
  @@index([organizationId, name])
  @@index([organizationId, domain])
  @@map("companies")
}

model Pipeline {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  isDefault      Boolean      @default(false)
  ownerId        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  deals          Deal[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          OrgMember    @relation(fields: [ownerId], references: [id])
  stages         Stage[]

  @@index([organizationId])
  @@index([ownerId])
  @@map("pipelines")
}

model Stage {
  id         String   @id @default(cuid())
  pipelineId String
  name       String
  order      Int
  color      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deals      Deal[]
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  @@index([pipelineId])
  @@map("stages")
}

model Deal {
  id             String       @id @default(cuid())
  organizationId String
  title          String
  value          Float?
  // nullable int probability (tests may set values like 50)
  probability     Int?
  stageId        String?
  pipelineId     String
  contactId      String?
  companyId      String?
  ownerId        String
  expectedClose  DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  activities     Activity[]
  company        Company?     @relation(fields: [companyId], references: [id])
  contact        Contact?     @relation(fields: [contactId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          OrgMember    @relation(fields: [ownerId], references: [id])
  pipeline       Pipeline     @relation(fields: [pipelineId], references: [id])
  stage          Stage?       @relation(fields: [stageId], references: [id])

  @@index([organizationId])
  @@index([ownerId])
  @@index([pipelineId])
  @@index([stageId])
  @@index([organizationId, title])
  @@map("deals")
}

model SavedView {
  id             String   @id @default(cuid())
  organizationId String
  ownerId        String?
  name           String
  entity         String
  description    String?
  viewUrl        String?
  entityType     String?
  sortBy         String?
  sortOrder      String?
  filters        Json
  isPublic       Boolean  @default(false)
  isStarred      Boolean  @default(false)
  createdById    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          OrgMember?   @relation("SavedViewOwner", fields: [ownerId], references: [id])
  createdBy      User?        @relation("UserToSavedView", fields: [createdById], references: [id])

  @@index([organizationId, entity])
  @@map("saved_views")
}

model Activity {
  id             String       @id @default(cuid())
  organizationId String
  type           ActivityType
  description    String
  subject        String?
  dueDate        DateTime?
  isCompleted    Boolean      @default(false)
  body           String?
  contactId      String?
  dealId         String?
  ownerId        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  contact        Contact?     @relation(fields: [contactId], references: [id])
  deal           Deal?        @relation(fields: [dealId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          OrgMember    @relation(fields: [ownerId], references: [id])

  @@index([organizationId])
  @@index([ownerId])
  @@index([contactId])
  @@index([dealId])
  @@map("activities")
}

model Webhook {
  id             String       @id @default(cuid())
  organizationId String
  url            String
  secret         String
  events         String[]
  isActive       Boolean      @default(true)
  ownerId        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          OrgMember    @relation(fields: [ownerId], references: [id])

  @@index([organizationId])
  @@index([ownerId])
  @@map("webhooks")
}

model EventAudit {
  id             String       @id @default(cuid())
  organizationId String
  eventType      String
  eventData      Json
  userId         String?
  ipAddress      String?
  userAgent      String?
  selfHash       String?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([eventType])
  @@index([createdAt])
  @@map("events_audit")
}

model ApiKey {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  key            String       @unique
  permissions    Json
  isActive       Boolean      @default(true)
  keyPrefix      String?
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  ownerId        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          OrgMember    @relation(fields: [ownerId], references: [id])

  @@index([organizationId])
  @@map("api_keys")
}

model ImportHistory {
  id             String       @id @default(cuid())
  organizationId String
  importType     String
  status         String
  totalRecords   Int
  processedRecords Int       @default(0)
  errors         Json
  fileName       String?
  fileSize       Int?
  entityType     String?
  totalRows      Int?
  processedRows  Int          @default(0)
  skippedRows    Int          @default(0)
  errorRows      Int          @default(0)
  affectedIds    String[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  rollbacks      ImportRollback[]

  @@index([organizationId])
  @@map("import_histories")
}

model ImportRollback {
  id             String       @id @default(cuid())
  importHistoryId String
  recordType     String
  recordId       String
  originalData   Json
  importId       String?
  action         String?
  entityId       String?
  createdAt      DateTime     @default(now())
  importHistory  ImportHistory @relation(fields: [importHistoryId], references: [id], onDelete: Cascade)

  @@index([importHistoryId])
  @@map("import_rollbacks")
}

model ImportTemplate {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  template       Json
  ownerId        String?
  isDefault      Boolean      @default(false)
  entityType     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("import_templates")
}

model WorkspaceJob {
  id             String       @id @default(cuid())
  organizationId String
  type           String
  status         String
  progress       Int          @default(0)
  result         Json?
  userId         String?
  metadata       Json?
  completedAt    DateTime?
  error          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("workspace_jobs")
}

enum OrgMemberRole {
  OWNER
  ADMIN
  MEMBER
  DEMO
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
  TASK
}

enum OrganizationPlan {
  FREE
  PRO
  TEAM
}

// NextAuth required models for email authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

